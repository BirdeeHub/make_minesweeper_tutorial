/*
    Programming is not so complex as you may think. Computers are stupid. They cannot learn english. Their language is much simpler than ours.
    Programs may one day be able to understand english, but there is a long time until then. 
    BUT a computer will never understand english. A computer is not able to understand anything.
    Too stupid. I get zap, I turn switch on. I dont get zap, I turn switch off. Passive.
    The hard part is writing instructions that something so stupid can follow.
    The other hard part is getting data to be visible where it needs to be in your program.
    The other other hard part is looking on the internet for that one function you don't know the name of but will solve all your problems.

    When I say Computers Know, what I mean is, someone has created a set of instructions we can use to tell the computer what to do
    except, without pulling our hair out trying to make sense of 00010101 00111001 010110101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 Stack Overflow Error

    Because humans want humans to understand the way humans should talk to a computer, it all comes down to just a few concepts regardless of language.

    Keep in mind that all of this may not make sense immediately. Focus on reading 1 step at a time for code, and figure out values of things at each step
    Read, understand what you can, and then look at the program in the recommended order, and then come back and reference. 
    There are many comments. Designed to be read in the order of the reading order. That is also marked by comments.

    Also, visual studio code has really good tools for beginners that are easy to install. Download a java extension in vs code.
    Other editors have this stuff too and sometimes better but it is harder to install stuff. 

    It will make things MUCH more readable. Or, readable at all.

    Computers know:

    1. How to store a type of thing, that we can access by a variable name. You must tell it what type of thing.

    The types of things.
    -You can store a true or false, called a boolean
    -A number of several sizes, i.e. a long is just like an integer (called an int going forward) that is able to store a bigger number than a basic integer can
    -Or a number with a decimal point (called a 'float' for 'floating point')
    -A single bit (0 or 1)
    -A single byte ((8) 0s or 1s)
    -A character (or, well, an integer index for a character)
    -How to refer to a specific piece of memory by an address(also called a pointer, or a reference)
    -An array of things, which is a pointer to a list of things where you access each item by index starting at 0 
        (myarray[0] would give the value at the first index)
        (and if you choose an index above the max you crash the program so you can get myarray.length and prevent this. also you can have arrays of arrays)
        (when you add an element to an array, you must create a new array with the larger size)
        (and then add the old elements and then the new elements to it with a loop)
    -A String which is an array of characters, or as we call them, "words". Yes, with the quotes. 
    
    in some languages you must tell it to create a physical place to store things before you tell it what variable name to store the value in.
    Not Java though. It has a Garbage Collector to clear up what you allocate automatically when you create variables.
    The big GC to take the wheel. The G stands for Guesus.
    Many languages have garbage collectors. Garbage Collectors do very important work every day just like human ones do.

    2. How to do a few very simple things with the things you stored.
    
    The main things it knows how to do with things it stores:
    (The language you use dictates what words and operators to use to tell it to do those things.)
    
    -You can tell it to store a thing (see above)
    -You can tell it to read a thing it stored
    -You can tell it to perform a thing on a thing you stored, including changing it (usually) and checking it against the value of another thing.
    -You can tell it to do one set of things or another based on checking a comparison between things (the main way to do this is called an if statement)
    -You can tell it to do a set of things until a comparison becomes false which is called a loop.
        (declared with "while(comparison){your stuff here}" or "for(variable_to_check; condition>variable; variable=variable+change){your stuff here}")
    -You can add a comment, like the one this file is inside with /* a comment */, or by using // for rest of line comments

    3. Where do you put these things?

    There is 1 fundamental way of both dictating and grouping what things should be stored and what things should be done on those things.
    It is called a function. A function has a name, and you can call it later. 
    It also returns a new thing to you so that you can do something with the result (as long as you give it a place to put it!)
    you can make it return void in many languages to return nothing. 
    Functions can also call themselves sometimes. This is called recursion and seems better than really it is sometimes.
    
    Things declared inside these things -> {} cannot be seen by things outside of them by default unless you return it. 
    This is called scope. It sees out but not in.
    
    {you}me //<-- here, you can see me but I cant see you
    
    //This is how we declare a function in Java. it returns an int, it is called addTwoIntegers...etc.., and it recieves 2 integers as input

    //int here means the value that this function will return will be of type integer
    int addTwoIntegersUnlessAnswerIsThreeOtherwiseMultiply(int a, int b){//<-- gets integers a and b from input, which is entered when it is called
        int c;  //<-- it then creates a new integer c to store the value of a + b or a * b
        if((a+b) != 3){  //<---------- if answer not equal to 3
            c = a + b;  //<-- do this
        }else{  //<--------------- else, (if it was 3)
            c = a * b;  //<-- else do this
        }
        a = c;//<---- this will not change 'a' outside of the function. only inside.
        return a;  //<----------- we then return that value 
    }
    //(I assigned the value of c to a in order to demonstrate scope. So 'a' has our answer, but that does not affect our original 'a' that we passed in)
    

    //and this is how we call it and store the result:
    int result;
    int firstNumber = 1;
    int secondNumber = 2;
    result = addTwoIntegersIfAnswerIsNotThreeOtherwiseMultiply(firstNumber, secondNumber);//<-- here is where we call it

    System.out.println(Integer.toString(result));//<-- will print the value 2 to the terminal window.

    to know what operators you have and what they can do (like + for example can append strings or add numbers. 
    / is also worth looking up. It will not work like you think for integers 
    the assign operator is = and is equal to is == and you can use ++ next to an integer to add 1 to it. ! means not on its own also)
    
    google operators for your language after reading this. Know how these work.
    
    //this while loop will execute 4 times. Walk through it. starting with i==0, if thisIsTrue do this, otherwise(else), if this, do this, etc...
    int theAnswer=42;
    int i = 0;
    while(i<12){
        if(i==1){
            i=i+2;
        }else if(i==0){
            i++;
        }else{
            if(theAnswer==42){
                i=i*2;
            }else{
                continue; //<-- this just skips to the next execution of the loop. break would jump all the way out. 
            }   //^It will not execute because theAnswer == 42
        }
    }
    
    //the loop changes the value of 'i' each time, and when 'i' is no longer less than 12 it stops.
    //First with i == 0, then i == 1, then 3, then 6 and then when it becomes 12, it will fail the check in the while loop and not execute again.
    //Try to read through it like the computer does. It's very good theAnswer == 42 otherwise it would loop forever! (until you get task manager involved)


    //this next thing will make more sense as you see it used and is a side detail. 
    
    //A Ternary expression:

    //Theres also a weird thing that is nice sometimes that looks like (boolean)?"thing1":"thing2" and is used like:

    int x = (3 == 4)?numberone:numbertwo;
    
    //It is basically just an if statement that returns the thing that was chosen (which I stored in x in the above example)
    // In this case, because 3 is not equal to 4, the ternary expression will return the second thing (whatever is inside numbertwo).

    //----------------------------------------------------------------------------------------------------------------------------------------------

    4. Okay, so this next part isn't all languages but all languages with classes (object-oriented) are basically like this:

    In Java, if you pass a primitive type(the ones mentioned at the top of the file except for arrays and strings) through a function call, 
    you pass a copy of the contents. You cannot change the value of the original with the result.

    int result;
    int firstNumber = 2;
    int secondNumber = 2;
    result = addTwoIntegersIfAnswerIsNotThreeOtherwiseMultiply(firstNumber, secondNumber);
    //firstNumber and secondNumber both are still 2, regardless of what happens to them inside the function. and result is now 4.

    But if you pass a thing that is an instance of a class instead, you CAN change the original inside a function.
    This is because it passes a copy of the reference (pointer) to the object. 
    It passes a copy of a primitive type called a reference or pointer that tells the program where to look, rather than a copy of the contents of the object.

    //A function called chairChooper that takes a reference to a chair as an argument.
    void chairChopper(ChairClass thisChair){
        thisChair.setHeight( thisChair.getHeight()/2 );
    }

    // and an example of it changing the value of the height of the chair passed into it.
    ChairClass chair1 = new ChairClass();
    chair1.setHeight(4);
    chairChopper(chair1);//<-- this will set height value of our chair1 instance to be half of what it was, because it is not a primitive type.
    System.out.println(chair1.getHeight());

    //^ the above would print the number 2 to the terminal

    5. And now for Classes

    Languages also have other ways of grouping things. C has Structs, for example, which allow you to group together related variables.
    If a language is object oriented, that basically just means it has classes rather than structs.

    Java has classes. Classes allow you to group sets of data and ALSO functions to work on that data, and you create new instances of them to use them. 
    You write a class, which is like a blueprint, and then you create new instances of them (called objects, because they are each a separate "thing").
    You create instances of a class just like you create a variable of a certain type, and each one will have its own separate set of data.
    To access the data from a particular instance(object): 
    you first need to create a variable of your new class type, 
    and create a new instance using 'new' and a constructor
        (a constructor is just a function with the name of the class that automatically returns an instance of that class)
    You can then pass this reference to the object (that particular instance) just like you pass a variable around.
    
    you can then access functions and the data in the variables inside of the object from outside of the class by using the dot operator '.'
    the functions inside of each object will operate on data accessible within *that object* (that particular instance of the class).
    
    This means if you have a class called chair with a height and a function to read it, you can then create 2 instances of chair.
    Then, Chair1.getHeight(); could be different from Chair2.getHeight();
    (if you bought them in different places, for example.)

    //If you had a class named MyClass that took a String as input in its constructor:

    String inputString = "some sort of data";
    MyClass instanceOfMyClass = new MyClass(inputString);

    //And if it contained our function addTwoIntegersIfAnswerIsNotThreeOtherwiseMultiply, we could do this:

    String inputString = "some sort of data";
    MyClass instanceOfMyClass = new MyClass(inputString);
    int result;
    int firstNumber = 6;
    int secondNumber = -3;
    result = instanceOfMyClass.addTwoIntegersIfAnswerIsNotThreeOtherwiseMultiply(firstNumber, secondNumber);

    //which would make the value of result be -18, (because (6 + (-3)) == 3 of course!)

    This is using the '.' operator to get the version of the function belonging to that instance of the class.
    i.e. chair.getHeight() would return the height of THAT chair and not another one.

    6. extends and implements:

    Classes can also extend other classes. This means that they have all the functions the class they extend has. 
    They in essence are an instance of that class, but with more stuff.
    They "Inherit" the functions and variables of the parent classes they extend.
    They can change definitions of things they inherit if they want with @Override.

    An example is, if my class was to "extend" a JFrame, it would inherit all the functions and properties needed to 
    display as a window and display UI components from the javax.swing library inside of it because those are the functions a JFrame class has access to. 
    All classes in this project named somethingWindow are examples of this. All game windows are JFrames with the relevant stuff inside them.
    Grid extends JPanel and an instance of it is inside a JFrame called MainGameWindow.

    An Interface is where you inherit the developers problems. They decided it would be better not to tell you how to write your program.
    You must write the functions of an interface you implement if you want to use them. Other functions are relying on you for it!
    They did not write them. They just wrote funtions that use them if you define them. 
    If you want to make a class that defines functions from an interface you use the 'implements' keyword when you define the class. 
    You must implement all functions of an interface if you wish to use an interface.
    Or, you can do it when you create an instance of the class with the new operator like this:

        ActionListener toggleQuestionMarkingListener = new ActionListener(){  //<-- create an instance of the ActionListener interface class
            public void actionPerformed(ActionEvent e){  //<-- we would like to write an actionPerformed function (we also have to write it.)
                grid.toggleQuestionMarks();  //<-- and we would like to turn the stupid question marks off when java swing functions call actionPerformed(ActionEvent e)
            }
        };

    And then you add it to a button. Now, when we click it, the JButton calls the actionPerformed function and it actually does something.
    So now in your code, you can use an interface to interact with code someone else wrote, but with your own custom logic.
    Basically, you implement an interface whenever you want someone elses code to call your code. 
    In this case, we want an action listener to call our code for what we do when we press a button

    7. Libraries:

    -Languages include libraries that use the basic operators and assignments to do more complex things so you can type less things to do things.
    Some languages do certain things better (less painfully, or faster) than others, and this is often because of what functions they have in their libraries.
    If you want to use a library, you must import it.
    
    //all my buttons and windows are from the following library. In another program, you should use a different one because this one is old apparently.

    import javax.swing.*;

    8. Errors:

    -languages handle errors differently. java uses:

    void thingtobetried() throws ExceptionClass {  //<-- you will catch this later if it gets thrown. It throws a reference to an object of type ExceptionClass
        saveToFile("the string we are saving");//<-- this might throw an error, which we will then throw out of this function
    }

    try{
        thingtobetried();
    }catch(ExceptionClass variable){ //<-- catch the error we threw
        variable.somefunction();
    }

    //this next one is used if the thing that can throw the error has to be closed. I.E. when reading from a file, you have to tell it to stop reading from the file.
    //if thingtoBeTriedThatTheNextStuffNeeds() is from a class that implements the "Closeable" interface, we could do the following:

    try(String thing = thingtoBeTriedThatTheNextStuffNeeds("some input")){
        thingtobetriedWithTheString(thing);
    }catch(ExceptionClass variable){
        variable.somefunction();
    }
    
    //try(thing){thing would close here->}catch(whatever){}
    //this saves us from having to do thing.close(), and makes clear what the scope of the variable should be.
    //Just as thingtoBeTriedThatTheNextStuffNeeds() implements Closeable to gain the functionality of remaining open until you call the close function that was implemented,
    //exceptions in java implement Throwable and they gain the functionality of being able to cause execution to jump to wherever 
    //the next 'catch' or 'throws' with an argument of the correct type is used.

    9. Random Java stuff:

    in Java, execution begins at the main(String[] args) function, which takes an array of strings as input (see top of this file if you forget what arrays are), 
    The array is filled with whichever words (strings) which may have been passed in from the command line. 
    The main function of this program begins in MineSweeper.java, and it calls our opening window.

    Java runs from a java virtual machine thingy that runs your java code so that you can run it anywhere you can install Java.
    You have to first compile it into a .class file for the JVM to be able to read your .java file.

    some languages compile directly to binary for your machine. Java chose increased compatibility. Or, they tried and did decently well.
    Java compiles to "bytecode".

    A .jar file is a runnable compressed java class folder. 
    It is a zip file and it contains your .class files, and a manifest file that the java vm looks for first to tell it what to run.
    Yes that means that on windows you can rename then to .zip and then unzip them with right click.

    Knowing the above, plus learning the syntax for doing each of those things, and knowing how to google for what functions in a 
    language would be best to use for a particular thing is honestly all you need to know to begin. 
    
    //-----------------------------------------------------------------------------------------------------------------------------------------

    When I began writing this, I knew some basic command line scripting, 
    so I was familiar with the concept of commands and how to use both if{}else statements and loops.
    I also knew what I have put in this file above. With that knowledge, I decided to build my first program with a graphical interface.

    An overview of what each of my classes does is in the README in the app folder. 
    There is one major public class per file, each with the same name as the class they contain.
    Most basic customization can be done by changing properties at the tops of the files.
    I have done my best to make sure that if you change 1 thing, it does not confusingly affect many other things.
    Poke around! If you break it further than you expected and dont know how to fix it, just uninstall and reinstall with the installer!

    This program was for me to learn to program.
    This program now exists to be minesweeper, but also a beginners coding playground.
    Dont like something? Find the thing, usually at the top of the file, change it, but also check out where it is used and how.
    Then run the compile script provided. 
    Then either run the jar, or, if you are in your game files right now, just run the program! (you wont see your error messages that way though on windows) 
    This program exists for you to understand how information moves around within a program, and how to control what stuff happens when.

    Oh, by the way, if you make your own program with a GUI, 
    choose a library that isn't swing because swing is old, not thread-safe, and not supported by GraalVM
    But dont worry about what any of those things mean exactly just yet while looking through this program. Just know I didn't know that either.
    For now, assume doing it with a different library is basically the same just different function and class names. 
    It wouldn't be a lie. Its just extra stuff for when you wanna go real fast. 
    Most of being fast is in how you structure the thing. Not the library or multi threading. 
    Anything that assigns new memory is heavier than changing something already there
    You also should not worry about fast much until you have a working version.

    1 more thing. Important for beginners. Recommended reading order:

    Play the game a couple times. When the code says JButton, it means theres a button for it, so see the button first, and it will make more sense.

    Then MineSweeper but dont think about what an EventQueue.invokeLater is too hard yet, 
    then OpeningWindow, 
    then MainGameWindow but dont worry about zoom listener for now unless you want a headache, 
    then Grid up through the end of the constructor,
    then Minefield, 
    then the rest of Grid except the zoom function and random toggle dark mode thing (it will be an excercise at the end). 
    now read the zoom function on both MainGameWindow and Grid together.
    Then ScoresFileIO, then ScoreEntry, then ScoresWindow. 
    instructionsWindow is really better viewed in the game.
    At the end, go to toggleDarkMode function in grid and there will be instructions for an excercise. 
    You will fix a bug in that function on game over screen (with some hints).
    I promise it isn't as hard of an excercise as it will seem at first.
    But you have to determine what extra conditions you need, and then do something extra based on them

    Don't worry, the path is clearly marked.

    By the end of reading the program in this way,
    You will have read through something in a way pretty close to the order I wrote the program, with an opening window created in between.
    except grid and MainGameWindow were originally the same class until they got too long and i had to override some stuff.
    You will have some understanding of how to break down what you would like to do such that a computer can do them,
    And have become familiar with at least 1 way to write that in a way it can read.
    You should also then be able to change most anything about this game that bugs you.

    The internet is very useful. But you must figure out what things to define, and what things to do with them, to ask the internet good questions.
    This advice is both more general and more specific than it seems.
*/
